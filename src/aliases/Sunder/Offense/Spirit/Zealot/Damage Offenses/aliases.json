[
       {
              "name": "Bleed/Damage",
              "isActive": "yes",
              "regex": "^dmg$",
              "script": "if snd.class == \"Zealot\" then\n  snd.starting_attack()\n\n  function snd.attack_function()\n    local firefist = false\n    if snd.defenses.def_firefist.state == \"deffed\" then\n      firefist = true\n    end\n    local zenith = false\n    if snd.defenses.def_zenith.state == \"deffed\" then\n      zenith = true\n    end\n    if snd.checkAff(\"crispy\") then\n      if not snd.checkaff(\"ablaze\") then\n        snd.target_cured(\"crispy\")\n      end\n    end\n    local immolation_ready = false\n    if snd.checkAff(\"ablaze\") then\n      if snd.checkAff(\"crispy\") then\n        immolation_ready = true\n      end\n    end\n    -- Flow Handling\n    -- Consider writing a check for different combos on firefist?\n    if not snd.waiting.queue then\n      if snd.used.shield then\n        string = \"touch hammer \" .. snd.target\n      elseif snd.parried_limb ~= \"torso\" then\n        string = \"flow \" .. snd.target .. \" clawtwist clawtwist\"\n      elseif snd.parried_limb ~= \"head\" then\n        if not snd.checkAff(\"crippled_throat\") then\n          string = \"flow \" .. snd.target .. \" edgekick heelrush head\"\n        else\n          string = \"flow \" .. snd.target .. \" sunkick heelrush head\"\n        end\n      elseif snd.parried_limb ~= \"left leg\" and snd.parried_limb ~= \"right leg\" then\n        string = \"flow \" .. snd.target .. \" wanekick left wanekick right\"\n      elseif snd.parried_limb ~= \"left leg\" and snd.parried_limb == \"right leg\" then\n        string = \"flow \" .. snd.target .. \" wanekick left wanekick left\"\n      elseif snd.parried_limb ~= \"right leg\" and snd.parried_limb == \"left leg\" then\n        string = \"flow \" .. snd.target .. \" wanekick right wanekick right\"\n      else\n        if snd.parried_limb ~= \"left arm\" then\n          string = \"flow \" .. snd.target .. \" pummel left pummel left\"\n        end\n      end\n      -- Hackles handling\n      -- Jawcrack \u003e Rive ...  rive to maximize the bleeding.\n      -- Prioritize Whipburst during firefist?\n      -- First, we should check if we have hackles balance.\t\n      if gmcp.Char.Vitals.ability_bal == \"1\" then\n        -- Cool! What are we doing with it? Let's figure that out and put it before our flow string!\n        if snd.parried_limb ~= \"head\" and not snd.checkAff(\"stuttering\") then\n          string = \"hackles \" .. snd.target .. \" jawcrack \" .. snd.sep .. string\n        else\n          string = \"hackles \" .. snd.target .. \" rive \" .. snd.sep .. string\n        end\n      end\n      -- Zenith handling\n      -- Immolation \u003e Pyromania \u003e Infernal \u003e Heatspear \u003e Quicken \u003e Scorch\n      -- handle pyromania with a variable?\n      -- use the limb state checker from templar limbs script for infernal check?\n      -- handle heatspear as an aff..\n      -- check if immolate not possible ... if not, quicken or scorch\n      if zenith then\n        if not snd.checkAff(\"heatspear\") and snd.checkAff(\"ablaze\") then\n          string = string .. snd.sep .. \"enact heatspear \" .. snd.target\n        elseif snd.checkAff(\"ablaze\") then\n          string = string .. snd.sep .. \"enact quicken \" .. snd.target\n        else\n          string = string .. snd.sep .. \"enact scorch \" .. snd.target\n        end\n      end\n      if not firefist then\n        if snd.checksomeAffs({\"ablaze\", \"heatspear\"}, 2) then\n          string = \"enact firefist\"\n        end\n      end\n      if immolation_ready then\n        string = \"enact immolation \" .. snd.target\n      end\n      if string ~= snd.last_attack and not snd.waiting.queue then\n        snd.last_attack = string\n        snd.attack(snd.last_attack)\n        snd.waiting.queue = true\n        tempTimer(snd.delay(), [[snd.waiting.queue = false]])\n      end\n    end\n  end\n\n  snd.attack_function()\nend",
              "isFolder": "no"
       }
]